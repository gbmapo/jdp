<?php

/**
 * @file
 * Contains sel.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function sel_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sel module.
    case 'help.page.sel':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('To manage the Grenier à SÉL (services, exchanges, etc.)') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function sel_theme() {
  return [
    'sel' => [
      'render element' => 'children',
    ],
  ];
}


function sel_cron() {

  /**
   * Cron a par défault les droits du user anonymous !
   * On lui donne ici les droits du userOne
   */
  $accountSwitcher = \Drupal::service('account_switcher');
  $account = \Drupal\user\Entity\User::load(1);
  $accountSwitcher->switchTo($account);

  // ----------------------------------------------------------------------------
  // Ajout de l'adresse du SÉL au formulaire de contact
  // ----------------------------------------------------------------------------
  $fieldStorage = \Drupal\field\Entity\FieldStorageConfig::loadByName('contact_message', 'field_recipient');
  $allowedValues = $fieldStorage->getSetting('allowed_values');
  if (array_key_exists('sel@lejardindepoissy.org', $allowedValues) == FALSE) {
    $allowedValues['sel@lejardindepoissy.org'] = '3. SÉL';
    $fieldStorage->setSetting('allowed_values', $allowedValues);
    $fieldStorage->save();
  }

  // ----------------------------------------------------------------------------
  // Nettoyage des services périmés
  // ----------------------------------------------------------------------------
  $storage = \Drupal::entityTypeManager()->getStorage('service');
  $dToday = date('Y-m-d');
  $database = \Drupal::database();
  $query = $database->select('service', 'se');
  $query->fields('se', ['id', 'duedate', 'status'])
    ->condition('status', 1, '=')
    ->condition('duedate', $dToday, '<');
  $results = $query->execute();
  $iNumber = 0;
  $aServiceOwners = [];
  foreach ($results as $key => $result) {
    $entity = $storage->load($result->id);
    $entity->status = 0;
    $entity->save();
    $iNumber++;
    $id = $entity->owner_id->target_id;
    $aServiceOwners[] = $id;
  }
  \Drupal::logger('sel')
    ->info('Number of cleaned out-of-date services: @number.', ['@number' => $iNumber]);
  if ($iNumber != 0) {
    $aServiceOwners = array_unique($aServiceOwners);
    $sTo = 'sel@lejardindepoissy.org';
    $sRecipients = '';
    $results = _setListOfSelistes();
    foreach ($results as $key => $result) {
      if (in_array($result->id, $aServiceOwners)) {
        $sRecipients .= $result->email . ", ";
      }
    }
    $sRecipients = substr($sRecipients, 0, strlen($sRecipients) - 2);
    $aParams = [$sRecipients];

    $message = [
      'module' => 'sel',
      'key' => 'emailfordeactivatedservices',
      'to' => 'batch',
      'params' => $aParams,
      'reply' => 'Le Grenier à SÉL',
    ];
    $aResults = shared_send_email($message);

  }

  // ----------------------------------------------------------------------------
  // Envoi d'un extrait par catégorie du Catalogue de Services
  // ----------------------------------------------------------------------------
  $dNextEmailForServicesPerCategory = \Drupal::state()
    ->get('sel.NextEmailForServicesPerCategory');
  $dToday = date('Y-m-d H:i:s');
  if ($dToday > $dNextEmailForServicesPerCategory) {
    _sendEmailForServicesExtraction('emailforservicespercategory');
  }
  else {
    \Drupal::logger('sel')
      ->info('Extraction of services per category: nothing to do.');
  }

  // ----------------------------------------------------------------------------
  // Envoi des derniers ajouts au Catalogue de Services
  // ----------------------------------------------------------------------------
  $dNextEmailForNewServices = \Drupal::state()
    ->get('sel.NextEmailForNewServices');
  $dToday = date('Y-m-d H:i:s');
  if ($dToday > $dNextEmailForNewServices) {
    _sendEmailForServicesExtraction('emailfornewservices');
  }
  else {
    \Drupal::logger('sel')
      ->info('Last additions to Catalog of Services: nothing to do.');
  }

  // ----------------------------------------------------------------------------
  $accountSwitcher->switchBack();
  // ----------------------------------------------------------------------------

}

function _sendEmailForUrgentService($sSeliste, $sAction, $sService, $sDueDate) {

  $sTo = 'sel@lejardindepoissy.org';
  $sRecipients = '';

  $results = _setListOfSelistes();
  foreach ($results as $key => $result) {
    $sRecipients .= $result->email . ", ";
  }
  $sRecipients = substr($sRecipients, 0, strlen($sRecipients) - 2);
  $aParams = [$sRecipients, $sSeliste, $sAction, $sService, $sDueDate];

  $message = [
    'module' => 'sel',
    'key' => 'emailforurgentservice',
    'to' => 'batch',
    'params' => $aParams,
    'reply' => 'Le Grenier à SÉL',
  ];
  $aResults = shared_send_email($message);

  $OK = isset($aResults['OK']) ? count($aResults['OK']) : 0;
  $KO = isset($aResults['KO']) ? count($aResults['KO']) : 0;
  \Drupal::logger('sel')
    ->info('Urgent service: @number emails sent, @number2 emails not sent.', [
      '@number' => $OK,
      '@number2' => $KO,
    ]);

}

function _setListOfSelistes() {

  $database = \Drupal::database();
  $query = $database->select('person', 'ap');
  $query->leftJoin('member', 'am', 'am.id = ap.member_id');
  $query->leftJoin('user__roles', 'ur', 'ur.entity_id = ap.user_id');
  $query->fields('ap', ['id', 'lastname', 'firstname', 'email'])
    ->fields('ur', ['entity_id', 'deleted', 'roles_target_id'])
    ->condition('status', [2, 3, 4], 'IN')
    ->condition('deleted', '0', '=')
    ->condition('roles_target_id', 'seliste', '=')
    ->orderBy('id', 'ASC');
  $results = $query->execute();
  return $results;

}

function _sendEmailForServicesExtraction($sCase) {

  $sTo = 'sel@lejardindepoissy.org';
  $sRecipients = '';

  $results = _setListOfSelistes();
  foreach ($results as $key => $result) {
    $sRecipients .= $result->email . ", ";
  }
  $sRecipients = substr($sRecipients, 0, strlen($sRecipients) - 2);

  switch ($sCase) {
    case 'emailforservicespercategory':
      $query = \Drupal::entityQuery('service_category');
      do {
        $iCategory = rand(1, $query->count()->execute());
        $sCategory = \Drupal::entityTypeManager()
          ->getStorage('service_category')
          ->load($iCategory)->name->value;
        $view = views_embed_view('sel_services', 'embed_1', $iCategory);
        $view = \Drupal::service('renderer')->renderPlain($view);
      } while (strpos($view, "ThisCategoryIsEmpty") !== FALSE);
      $aParams = [
        $sRecipients,
        $view,
        'sel.NextEmailForServicesPerCategory',
        'Extraction of services per category: ',
        $sCategory,
      ];
      break;
    case 'emailfornewservices':
      $query = \Drupal::entityQuery('service_category');
      $dLastExtractionDate = strftime("%Y-%m-%d", strtotime("- 1 week", strtotime(\Drupal::state()
        ->get('sel.NextEmailForNewServices'))));
      $view = views_embed_view('sel_services', 'embed_2', $dLastExtractionDate);
      $view = \Drupal::service('renderer')->renderPlain($view);
      $aParams = [
        $sRecipients,
        $view,
        'sel.NextEmailForNewServices',
        'Last additions to Catalog of Services: ',
      ];
      break;
  }

  $message = [
    'module' => 'sel',
    'key' => $sCase,
    'to' => 'batch',
    'params' => $aParams,
    'reply' => 'Le Grenier à SÉL',
  ];
  $aResults = shared_send_email($message);

  $OK = isset($aResults['OK']) ? count($aResults['OK']) : 0;
  $KO = isset($aResults['KO']) ? count($aResults['KO']) : 0;
  \Drupal::logger('sel')
    ->info('@title@number emails sent, @number2 emails not sent.', [
      '@title' => $aParams[3],
      '@number' => $OK,
      '@number2' => $KO,
    ]);

  $sNextWeek = strftime("%Y-%m-%d", strtotime("+ 1 week"));
  \Drupal::state()->set($aParams[2], $sNextWeek);

}

function _sendEmailForExchange($aParams) {

  $sTo = '';
  $sBcc = 'sel@lejardindepoissy.org';

  $aIds = explode("|", $aParams[2]);
  $sTemp = '';
  $results = _setListOfSelistes();
  foreach ($results as $key => $result) {
    if (in_array($result->id, $aIds)) {
      $sTo .= $result->email . ", ";
      $sTemp .= $result->firstname . ", ";
    }
  }
  $sTo = substr($sTo, 0, strlen($sTo) - 2);
  $aParams = [$sBcc, $aParams[0], $aParams[1], $sTemp];

  $message = [
    'module' => 'sel',
    'key' => 'emailforexchange',
    'to' => $sTo,
    'params' => $aParams,
    'reply' => 'Le Grenier à SÉL',
  ];
  $aResults = shared_send_email($message);

  \Drupal::logger('sel')->info('Exchange: Email sent.');

}

function sel_mail($key, &$message, $aParams) {

  $sFrom = 'sel@lejardindepoissy.org';
  $message['headers'] = [
    'From' => '=?UTF-8?B?'.base64_encode('Le Grenier à SÉL').'?=' . '<sel@lejardindepoissy.org>',
    'Sender' => $sFrom,
    'Return-Path' => $sFrom,
  ];
  switch ($key) {
    case 'emailforurgentservice':
      $message['subject'] = '[Le Grenier à SÉL] Un service urgent requiert votre attention...';
      $sBody = $aParams[1] . ' a posté cette ' . $aParams[2] . ' urgente valide jusqu\'au <span style="color:red">' . $aParams[4] . '</span> : ' . $aParams[3] . '<br><br>';
      $message['body'][] = \Drupal\Core\Render\Markup::create($sBody);
      break;
    case 'emailforservicespercategory':
      $message['subject'] = '[Le Grenier à SÉL] Extrait du Catalogue de Services...';
      $sBody = $aParams[4] . " » (catégorie choisie de façon aléatoire).";
      $sBody .= $aParams[1];
      $message['body'][] = \Drupal\Core\Render\Markup::create($sBody);
      break;
    case 'emailfornewservices':
      $message['subject'] = '[Le Grenier à SÉL] Derniers ajouts au Catalogue de Services...';
      $sBody = $aParams[1];
      $message['body'][] = \Drupal\Core\Render\Markup::create($sBody);
      break;
    case 'emailforexchange':
      $message['subject'] = '[Le Grenier à SÉL] Votre échange du ' . $aParams[1] . ' a été ' . $aParams[2] . '.';
      $sBody = $aParams[3] . "<br><br>";
      $message['body'][] = \Drupal\Core\Render\Markup::create($sBody);
      break;
    case 'emailfordeactivatedservices':
      $message['subject'] = '[Le Grenier à SÉL] Au moins un de vos services vient d\'être désactivé...';
      $message['body'][] = 'Cher S&Eacute;Liste,<br>';
      break;
  }
}

function sel_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch ($view->id()) {
    case 'sel_services':
      if ($view->current_display == 'embed_2') {
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if ($condition['field'] == 'service.additiondate') {
              $condition['operator'] = '>=';
            }
          }
        }
      }
      break;
    case 'sel_echanges':
      if ($view->current_display == 'page_2') {
        foreach ($query->where as &$condition_group) {
          $condition_group['type'] = 'OR';
        }
        $pid = $view->args[0];
        if ($pid == \Drupal::currentUser()->id()) {
          $title = 'Mes échanges';
        }
        else {
          $person = \Drupal::entityTypeManager()
            ->getStorage('person')
            ->load($pid);
          $sNomPrenom = $person->label();
          $title = 'Les échanges de ' . $sNomPrenom;
        }
        $view->build_info['title'] = $title;
      }
      break;
    default:

  }
}

function sel_views_post_execute(ViewExecutable $view) {
  switch ($view->id()) {

    case 'sel_selistes':
      if ($view->current_display == 'page_1') {
        $database = \Drupal::database();
        foreach ($view->result as $key => $value) {
          $person = $value->_entity->get('id')->value;
          $solde = $value->_entity->get('field_sel_balance')->value;

          $query = $database->select('person', 'ap');
          $query->leftJoin('exchange', 'ex', 'ex.from_seliste_id = ap.id');
          $query->addExpression('SUM(ex.value)', 'credit');
          $query->groupBy("ap.id");
          $query->condition('ap.id', $person, '=');
          $result = $query->execute()->fetchAll();
          $credit = $result[0]->credit;

          $query = $database->select('person', 'ap');
          $query->leftJoin('exchange', 'ex', 'ex.to_seliste_id = ap.id');
          $query->addExpression('SUM(ex.value)', 'debit');
          $query->groupBy("ap.id");
          $query->condition('ap.id', $person, '=');
          $result = $query->execute()->fetchAll();
          $debit = $result[0]->debit;

          $solde = $solde + $credit - $debit;
          $value->_entity->set('field_sel_balance', $solde);
        }
      }
      break;

    default:

  }
}

function sel_views_pre_render(ViewExecutable $view) {
  switch ($view->id()) {
    case 'sel_services':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'sel/sel';
          $view->element['#attached']['library'][] = 'sel/LoS';
          break;
        case 'page_2':
          $view->element['#attached']['library'][] = 'sel/LomyS';
          break;
        default:
      }
      break;
    case 'sel_echanges':
      switch ($view->current_display) {
        case 'page_1':
        case 'page_2':
          $view->element['#attached']['library'][] = 'sel/sel';
          break;
        default:
      }
      break;
    default:
  }
}

function sel_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  switch ($form_id) {
    case 'person_add_form':
    case 'person_edit_form':
      $form['field_sel_isseliste']['#attributes'] = [
        'onchange' => "hasChanged(this)",
      ];
      $form['#attached']['library'][] = 'sel/person';
      array_unshift($form['actions']['submit']['#submit'], 'sel_person_form_submit');
      break;

    default:
  }

}

function sel_person_form_submit(&$form, FormStateInterface $form_state) {

  $values = $form_state->getValues();
  $user_id = $values['user_id'][0]['target_id'];
  $userofperson = User::load($user_id);

  if ($values['field_sel_isseliste']['value']) {
    $userofperson->addRole('seliste');
  }
  else {
    $userofperson->removeRole('seliste');
  }

}

/*
function sel_entity_presave(EntityInterface $entity)
{
  switch ($entity->getEntityType()->id()) {
    case "service":
      $fileId = $entity->get('file')->target_id;
      if ($fileId != 0) {
        $file = \Drupal\file\Entity\File::load($fileId);
      }
      break;
    default:
  }

}
 */
