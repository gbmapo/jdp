<?php

/**
 * @file
 * Contains shared.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use \Drupal\node\NodeInterface;
use \Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function shared_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the shared module.
    case 'help.page.shared':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Functions shared with others modules') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function shared_theme()
{
  return [
    'shared' => [
      'render element' => 'children',
    ],
  ];
}


/**
 * How do I programmatically update the allowed values of a list field?
 * You have to add a function to the field settings.
 * This is not in the field UI, so you have to export the configuration and
 * change the field in field.storage.node.field_recipient.yml
 * type: list_string
 * settings:
 *   allowed_values: {  }
 *   allowed_values_function: 'mymodule_allowed_values_function'
 */
function shared_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable)
{

  // ----------------------------------------------------------------------------
  // Ajout de l'adresse de l'association au formulaire de contact
  // ----------------------------------------------------------------------------
  if ($definition->get('entity_type') == 'contact_message' && $definition->get('field_name') == 'field_recipient') {
    $allowedValues = $definition->getSetting('allowed_values');
    $mail = \Drupal::config('system.site')->get('mail');
    if (!array_key_exists($mail, $allowedValues)) {
      $allowedValues[$mail] = '1. Association';
    }
    return $allowedValues;
  }

}

function shared_form_contact_message_feedback_form_alter(&$form, FormStateInterface $form_state)
{

  $markup = '<p style="border:2px; border-style:solid; border-color:#FF0000; padding: 1em;">';
  $markup .= t('Before sending your question, are you sure that the answer is not in our Frequently Asked Questions (see FAQ in the general menu)?');
  $markup .= '</p>';
  $form['warning'] = [
        '#markup' => check_markup($markup, 'full_html'),
        '#weight' => -1,
        ];
  $form['field_recipient']['widget']['#title'] = FALSE;
  $form['field_recipient']['widget']['#prefix'] = t('Recipient') .' <a class="use-ajax" data-dialog-options="{&quot;width&quot;:440}" data-dialog-type="modal" href="/node/135" id="modal-dialog"><img src="/sites/default/files/images/info.svg"></a>';
  $form['field_recipient']['widget']['#attached'] = ['library' => ['core/drupal.dialog.ajax']];
  $form['field_recipient']['widget']['#sort_options'] = TRUE;
//$form['field_recipient']['#validated'] = TRUE;
  $form['actions']['preview']['#access'] = FALSE;

}


function shared_mail_alter(&$message)
{

  switch ($message['id']) {

    case "association_membershipfirstemail":
    case "association_membershipreminderemail":
    case "amap_emailforstupids":
    case "sel_emailfordeactivatedservices":
    case "sel_emailforexchange":
    case "sel_emailfornewservices":
    case "sel_emailforservicespercategory":
    case "sel_emailforurgentservice":
      $message['headers']['MIME-Version'] = "1.0";
      $message['headers']['Content-Type'] = "text/html; charset=UTF-8";
      $message['headers']['Content-Transfer-Encoding'] = "8Bit";
      $message['headers']['X-Mailer'] = "Drupal";
      break;
    case "contact_page_mail":
      $contact_message = $message['params']['contact_message'];
      $recipient = $contact_message->get('field_recipient')->getString();
      if (is_numeric($recipient)) {
        $database = \Drupal::database();
        $query = $database->select('contract', 'co');
        $query->leftJoin('users_field_data', 'us', 'us.uid = co.referent_id');
        $query->fields('us', ['mail']);
        $query->fields('co', ['id']);
        $query->condition('co.id', $recipient);
        $results = $query->execute()->fetchCol();
        $recipient = $results[0];
      }
      $message['to'] = $recipient;
      break;
    //----------------------------------------------------------------------
    case "user_register_admin_created":
    case "user_register_pending_approval":
      $bcc = \Drupal::config('system.site')->get('mail');
      $message['headers']['Bcc'] = $bcc;
      break;
    case "user_password_reset":
    case "user_register_no_approval_required":
    case "user_status_activated":
    case "user_status_blocked":
    case "user_status_deleted":
      break;
  }

}

function shared_views_plugins_field_alter(array &$plugins)
{

  $plugins['custom']['class'] = 'Drupal\shared\Plugin\views\field\CustomToken';

}

function shared_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

  if ($form_id == 'views_form_association_persons_page_2' || $form_id == 'views_form_association_persons_page_4') {
    $views_send_to_name = 'nothing_pos_2';
  }
  elseif (substr($form_id, 0, 47) == 'views_form_amap_contracts_subscriptions_page_1_') {
    $views_send_to_name = 'designation_pos_3';
    $form_id = 'views_form_amap_contracts_subscriptions_page_1_';
  }
  else {
  }

  switch ($form_id) {
    case 'views_form_amap_contracts_subscriptions_page_1_':
    case 'views_form_association_persons_page_2':
    case 'views_form_association_persons_page_4':

      switch ($form_state->get('step')) {

        case 'views_form_views_form':
          break;

        case 'views_send_config_form':
          $person = \Drupal::entityTypeManager()
            ->getStorage('person')
            ->load(\Drupal::currentUser()->id());
          $sNomPrenom = $person->label();
          $sMail = $person->get('email')
            ->getString();
          $aFromName = [
            0 => '<Veuillez choisir une valeur dans la liste>',
            1 => $sNomPrenom,
            2 => 'Le Jardin de Poissy',
            3 => 'L\'AMAP du Jardin de Poissy',
            4 => 'Le Grenier à SEL',
          ];
          $form['from']['views_send_from_name_bis'] = [
            '#attributes'    => [
              'onchange' => 'hasChanged(this)',
            ],
            '#type'          => 'select',
            '#options'       => $aFromName,
            '#default_value' => 0,
            '#required'      => TRUE,
            '#weight'        => -99,
          ];
          $form['from']['views_send_from_name'] = [
            '#attributes' => [
              'id' => 'edit-views-send-from-name',
            ],
            '#type'       => 'hidden',
          ];
          $form['from']['views_send_from_mail'] = [
            '#attributes'    => [
              'readonly' => 'readonly',
            ],
            '#type'          => 'textfield',
            '#default_value' => '',
          ];
          $form['from']['views_send_from_mail_currentuser'] = [
            '#attributes'    => [
              'id' => 'edit-views-send-from-mail-currentuser',
            ],
            '#type'          => 'hidden',
            '#maxlength'     => 255,
            '#default_value' => $sMail,
          ];
          $form['to']['#type'] = 'hidden';
          $form['to']['views_send_to_name']['#default_value'] = $views_send_to_name;
          $form['to']['views_send_to_mail']['#default_value'] = 'email_pos_4';
          $form['mail']['views_send_subject'] = [
            '#type'          => 'textfield',
            '#maxlength'     => 255,
            '#title'         => t('Subject'),
            '#default_value' => '',
            '#required'      => TRUE,
          ];
          $form['mail']['views_send_message'] = [
            '#type'          => 'text_format',
            '#format'        => "plain_text",
            '#rows'          => 10,
            '#title'         => t('Message'),
            '#default_value' => '',
            '#required'      => TRUE,
          ];
          $form['mail']['token']['#type'] = 'hidden';
          $form['mail']['views_send_attachments']['#description'] = null;
          $form['additional']['#type'] = 'hidden';
          $form['views_send_remember']['#type'] = 'hidden';
          $form['views_send_direct']['#disabled'] = TRUE;
          $form['#attached']['library'][] = 'shared/masscontact';
          break;

        case 'views_send_confirm_form':
          $form['headers']['#type'] = 'hidden';
          break;

        default:
      }
      break;

    default:

  }

}

function shared_node_access(NodeInterface $node, $op, AccountInterface $account)
{

  switch ($node->type->target_id) {
    case 'article':
    case 'page':
    case 'evenement':

      if ($op == 'view') {

        $tags = $node->get('field_tags')->referencedEntities();
        foreach ($tags as $tag) {
          if ($tag->tid->value == 7) { // 7=Privé
            if ($account->isAnonymous()) {
              return \Drupal\Core\Access\AccessResult::forbidden();
            }
            else {
              return \Drupal\Core\Access\AccessResult::allowed();
            }
          }
        }

      }
      break;
    default:
  }

}

/**
 * replaced by shared_form_user_login_form_alter and shared_user_login_form_submit
 * from https://www.thesavvyfew.com/insights/how-redirect-user-after-login-drupal-proper-way
 *
function shared_user_login($account)
{
  $currentUrl = \Drupal::service('path.current')->getPath();
  if ($currentUrl && (substr($currentUrl, 0, 12) == '/user/reset/')) {
    return;
  }
  $response = new RedirectResponse('/');
  $response->send();
  exit;
}
 */

function shared_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $currentUrl = \Drupal::service('path.current')->getPath();
  if ($currentUrl && (substr($currentUrl, 0, 12) == '/user/reset/')) {
    return;
  }
  $form['#submit'][] = 'shared_user_login_form_submit';
}
function shared_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

function shared_preprocess_node__page(array &$variables)
{

  if ($variables['node']->nid->value == 25) {
    $variables['#attached']['library'][] = 'shared/modal';
  }

}
